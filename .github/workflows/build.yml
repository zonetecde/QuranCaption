name: Build Tauri Apps

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: macos-13 # Intel Mac for x86_64 build
            target: x86_64-apple-darwin
            arch: intel
          - os: macos-latest # ARM Mac for M1/M2/M3 build
            target: aarch64-apple-darwin
            arch: arm
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      # Set up build environment variables for faster builds
      - name: Configure build environment
        run: |
          echo "CARGO_BUILD_JOBS=2" >> $GITHUB_ENV
          echo "CARGO_NET_GIT_FETCH_WITH_CLI=true" >> $GITHUB_ENV

      # macOS setup
      - name: Download yt-dlp (macOS)
        if: startsWith(matrix.os, 'macos')
        run: |
          curl -L -o yt-dlp https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp_macos
          chmod +x yt-dlp
          mkdir -p src-tauri/binaries
          mv yt-dlp src-tauri/binaries/yt-dlp

      - name: Install ffmpeg and copy binaries (macOS)
        if: startsWith(matrix.os, 'macos')
        run: |
          brew update
          brew install ffmpeg
          mkdir -p src-tauri/binaries
          cp "$(brew --prefix)/bin/ffprobe" src-tauri/binaries/ffprobe
          cp "$(brew --prefix)/bin/ffmpeg" src-tauri/binaries/ffmpeg
          chmod +x src-tauri/binaries/ffprobe
          chmod +x src-tauri/binaries/ffmpeg

      # Windows setup
      - name: Download yt-dlp (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path src-tauri/binaries -Force | Out-Null
          curl -L -o yt-dlp.exe https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp.exe
          Move-Item yt-dlp.exe src-tauri/binaries/yt-dlp.exe

      - name: Download and extract ffmpeg and ffprobe (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          $binDir = "src-tauri/binaries"
          New-Item -ItemType Directory -Path $binDir -Force | Out-Null

          # Download latest static build zip from BtbN
          $ffmpegZip = "ffmpeg.zip"
          curl -L -o $ffmpegZip "https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-essentials.zip"

          # Extract using built-in PowerShell
          $extractDir = "ffmpeg-extracted"
          if (Test-Path $extractDir) { Remove-Item -Recurse -Force $extractDir }
          Expand-Archive -Path $ffmpegZip -DestinationPath $extractDir -Force

          # Find extracted root (contains bin/ffmpeg.exe & bin/ffprobe.exe)
          $rootDir = Get-ChildItem -Directory -Path $extractDir | Select-Object -First 1
          Copy-Item -Path (Join-Path $rootDir.FullName "bin/ffmpeg.exe") -Destination $binDir -Force
          Copy-Item -Path (Join-Path $rootDir.FullName "bin/ffprobe.exe") -Destination $binDir -Force

      # Linux setup
      - name: Install Linux build dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          # Base toolchain and deps for Tauri
          sudo apt-get install -y build-essential pkg-config file curl ca-certificates xz-utils
          # GTK/WebKit deps (try 4.1 first, fallback to 4.0)
          sudo apt-get install -y libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev patchelf
          sudo apt-get install -y libwebkit2gtk-4.1-dev || sudo apt-get install -y libwebkit2gtk-4.0-dev
          # Additional dependencies for better Linux compatibility
          sudo apt-get install -y xdg-utils desktop-file-utils

      - name: Download yt-dlp (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          curl -L -o yt-dlp https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp
          chmod +x yt-dlp
          mkdir -p src-tauri/binaries
          mv yt-dlp src-tauri/binaries/yt-dlp

      - name: Download and extract ffmpeg and ffprobe (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          mkdir -p src-tauri/binaries
          curl -L -o ffmpeg.tar.xz "https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-amd64-static.tar.xz"
          rm -rf ffmpeg-extracted
          mkdir ffmpeg-extracted
          tar -xJf ffmpeg.tar.xz -C ffmpeg-extracted
          rootdir=$(find ffmpeg-extracted -maxdepth 1 -mindepth 1 -type d | head -n 1)
          cp "$rootdir/ffmpeg" src-tauri/binaries/ffmpeg
          cp "$rootdir/ffprobe" src-tauri/binaries/ffprobe
          chmod +x src-tauri/binaries/ffmpeg src-tauri/binaries/ffprobe

      - name: Install app dependencies
        run: npm install

      - name: Build the app
        run: npm run tauri build --verbose
        timeout-minutes: 45
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.QURANCAPTION_BUILD_KEY }}

      - name: Upload macOS DMG
        if: startsWith(matrix.os, 'macos')
        uses: actions/upload-artifact@v4
        with:
          name: macos-artifact-${{ matrix.arch || 'x64' }}
          path: 'src-tauri/target/release/bundle/dmg/*.dmg'

      - name: Upload Windows Installer
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows-artifact
          path: 'src-tauri/target/release/bundle/nsis/Quran Caption_*_x64-setup.exe'

      - name: Upload Linux Artifacts
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: linux-artifact
          path: |
            src-tauri/target/release/bundle/appimage/*.AppImage
            src-tauri/target/release/bundle/deb/*.deb

  release:
    name: Create Draft Release
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Prepare release assets
        run: |
          mkdir release-assets
          cd artifacts/windows-artifact
          WIN_FILE=$(find . -name "Quran Caption_*_x64-setup.exe")
          mv "$WIN_FILE" ../../release-assets/QuranCaption.Windows.exe

          # macOS Intel
          cd ../../artifacts/macos-artifact-intel || true
          if [ -d . ]; then
            DMG_FILE=$(find . -name "*.dmg")
            if [ -n "$DMG_FILE" ]; then
              mv "$DMG_FILE" ../../release-assets/QuranCaption.MacOS.Intel.dmg
            fi
          fi

          # macOS ARM (M1/M2/M3)
          cd ../../artifacts/macos-artifact-arm || true
          if [ -d . ]; then
            DMG_FILE=$(find . -name "*.dmg")
            if [ -n "$DMG_FILE" ]; then
              mv "$DMG_FILE" ../../release-assets/QuranCaption.MacOS.ARM.dmg
            fi
          fi

          cd ../../artifacts/linux-artifact || true
          if [ -d . ]; then
            # Renommer les fichiers Linux avec des noms plus simples
            find . -name "*.AppImage" -exec mv {} ../../release-assets/QuranCaption.Linux.AppImage \;
            find . -name "*.deb" -exec mv {} ../../release-assets/QuranCaption.Linux.deb \;
          fi

          # Copier le fichier latest.json généré par Tauri (pour les mises à jour automatiques)
          cd ../..
          # Le fichier latest.json est généré lors du build sur chaque OS, on prend celui de Windows
          find artifacts/windows-artifact -name "latest.json" -exec cp {} release-assets/ \; || echo "Fichier latest.json non trouvé"
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          files: release-assets/*
          body: |
            ## QuranCaption Release
            This is an auto-generated draft release containing the latest build artifacts for QuranCaption.
            ### Download the appropriate installer for your OS.
            - For Windows, use the EXE installer.
            - For macOS, choose the DMG file matching your architecture (Intel or ARM).
            - For Linux, choose between the AppImage or DEB package.
