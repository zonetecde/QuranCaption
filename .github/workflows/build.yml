name: Build Tauri Apps

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [macos-latest, windows-latest] # Removed ubuntu-latest
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      # macOS setup
      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install p7zip
      - name: Download yt-dlp (macos)
        if: matrix.os == 'macos-latest'
        run: |
          curl -L -o yt-dlp https://github.com/yt-dlp/yt-dlp/releases/download/2025.05.22/yt-dlp_macos
          chmod +x yt-dlp
          mv yt-dlp src-tauri/binaries/yt-dlp
      - name: Download and extract ffprobe and ffmpeg (macos)
        if: matrix.os == 'macos-latest'
        run: |
          curl -L -o ffprobe.7z https://evermeet.cx/ffmpeg/ffprobe-119416-g1dbc5675c1.7z
          curl -L -o ffmpeg.7z https://evermeet.cx/ffmpeg/ffmpeg-119416-g1dbc5675c1.7z
          7z e -y ffprobe.7z -osrc-tauri/binaries
          7z e -y ffmpeg.7z -osrc-tauri/binaries
          chmod +x src-tauri/binaries/ffprobe
          chmod +x src-tauri/binaries/ffmpeg
      - name: Download yt-dlp (windows)
        if: matrix.os == 'windows-latest'
        run: |
          curl -L -o yt-dlp.exe https://github.com/yt-dlp/yt-dlp/releases/download/2025.05.22/yt-dlp.exe
          chmod +x yt-dlp.exe
          mv yt-dlp.exe src-tauri/binaries/yt-dlp.exe
      # FFprobe and FFmpeg extraction for Windows
      - name: Download and extract ffprobe.exe and ffmpeg.exe
        if: matrix.os == 'windows-latest'
        run: |
          curl -L -o ffmpeg.7z https://www.gyan.dev/ffmpeg/builds/ffmpeg-git-essentials.7z
          7z e -y ffmpeg.7z -i'!*/bin/ffprobe.exe' -osrc-tauri/binaries
          7z e -y ffmpeg.7z -i'!*/bin/ffmpeg.exe' -osrc-tauri/binaries
      # Video creator script for Windows
      # QuranCaption-2\src\lib\functions\export_scripts\build_win.bat
      - name: Build video creator script (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd src-tauri/video-creator
          chmod +x build_win.bat
          ./build_win.bat
      # Video creator script for macOS
      # QuranCaption-2\src\lib\functions\export_scripts\build_mac.sh
      - name: Build video creator script (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          cd src-tauri/video-creator
          chmod +x build_mac.sh
          ./build_mac.sh
      - name: Patch time crate
        working-directory: src-tauri
        run: cargo update -p time --precise 0.3.35

      - name: Install app dependencies
        run: npm install

      - name: Build the app
        run: npm run tauri build --verbose

      - name: Zip macOS App
        if: matrix.os == 'macos-latest'
        run: |
          ditto -c -k --sequesterRsrc --keepParent "src-tauri/target/release/bundle/macos/Quran Caption.app" "Quran.Caption.MacOS.zip"
      - name: Upload macOS artifact
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: macos-artifact
          path: Quran.Caption.MacOS.zip

      - name: Upload Windows Installer
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows-artifact
          path: src-tauri/target/release/bundle/nsis/Quran Caption_*_x64-setup.exe

  release:
    name: Create Draft Release
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Prepare release assets
        run: |
          mkdir release-assets
          cd artifacts/windows-artifact
          WIN_FILE=$(find . -name "Quran Caption_*_x64-setup.exe")
          mv "$WIN_FILE" ../../release-assets/Quran.Caption.Windows.exe
          cd ../../artifacts/macos-artifact
          mv Quran.Caption.MacOS.zip ../../release-assets/Quran.Caption.MacOS.zip
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          files: release-assets/*
