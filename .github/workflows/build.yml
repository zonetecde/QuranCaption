name: Build Tauri Apps

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      # macOS setup
      - name: Download yt-dlp (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          curl -L -o yt-dlp https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp_macos
          chmod +x yt-dlp
          mkdir -p src-tauri/binaries
          mv yt-dlp src-tauri/binaries/yt-dlp

      - name: Install ffmpeg and copy binaries (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew update
          brew install ffmpeg
          mkdir -p src-tauri/binaries
          cp "$(brew --prefix)/bin/ffprobe" src-tauri/binaries/ffprobe
          cp "$(brew --prefix)/bin/ffmpeg" src-tauri/binaries/ffmpeg
          chmod +x src-tauri/binaries/ffprobe
          chmod +x src-tauri/binaries/ffmpeg

      # Windows setup
      - name: Download yt-dlp (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path src-tauri/binaries -Force | Out-Null
          curl -L -o yt-dlp.exe https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp.exe
          Move-Item yt-dlp.exe src-tauri/binaries/yt-dlp.exe

      - name: Download and extract ffmpeg and ffprobe (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          $binDir = "src-tauri/binaries"
          New-Item -ItemType Directory -Path $binDir -Force | Out-Null

          # Download latest static build zip from BtbN
          $ffmpegZip = "ffmpeg.zip"
          curl -L -o $ffmpegZip https://github.com/BtbN/FFmpeg-Builds/releases/latest/download/ffmpeg-master-latest-win64-gpl.zip

          # Extract using built-in PowerShell
          $extractDir = "ffmpeg-extracted"
          if (Test-Path $extractDir) { Remove-Item -Recurse -Force $extractDir }
          Expand-Archive -Path $ffmpegZip -DestinationPath $extractDir -Force

          # Find extracted root (contains bin/ffmpeg.exe & bin/ffprobe.exe)
          $rootDir = Get-ChildItem -Directory -Path $extractDir | Select-Object -First 1
          Copy-Item -Path (Join-Path $rootDir.FullName "bin/ffmpeg.exe") -Destination $binDir -Force
          Copy-Item -Path (Join-Path $rootDir.FullName "bin/ffprobe.exe") -Destination $binDir -Force

      # Linux setup
      - name: Install Linux build dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          # Base toolchain and deps for Tauri
          sudo apt-get install -y build-essential pkg-config file curl ca-certificates xz-utils
          # GTK/WebKit deps (try 4.1 first, fallback to 4.0)
          sudo apt-get install -y libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev patchelf
          sudo apt-get install -y libwebkit2gtk-4.1-dev || sudo apt-get install -y libwebkit2gtk-4.0-dev
          # Additional dependencies for better Linux compatibility
          sudo apt-get install -y xdg-utils desktop-file-utils

      - name: Download yt-dlp (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          curl -L -o yt-dlp https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp
          chmod +x yt-dlp
          mkdir -p src-tauri/binaries
          mv yt-dlp src-tauri/binaries/yt-dlp

      - name: Download and extract ffmpeg and ffprobe (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          mkdir -p src-tauri/binaries
          curl -L -o ffmpeg.tar.xz https://github.com/BtbN/FFmpeg-Builds/releases/latest/download/ffmpeg-master-latest-linux64-gpl.tar.xz
          rm -rf ffmpeg-extracted
          mkdir ffmpeg-extracted
          tar -xJf ffmpeg.tar.xz -C ffmpeg-extracted
          rootdir=$(find ffmpeg-extracted -maxdepth 1 -mindepth 1 -type d | head -n 1)
          cp "$rootdir/bin/ffmpeg" src-tauri/binaries/ffmpeg
          cp "$rootdir/bin/ffprobe" src-tauri/binaries/ffprobe
          chmod +x src-tauri/binaries/ffmpeg src-tauri/binaries/ffprobe

      - name: Install app dependencies
        run: npm install

      - name: Build the app
        run: npm run tauri build --verbose

      - name: Upload macOS DMG
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: macos-artifact
          path: 'src-tauri/target/release/bundle/dmg/*.dmg'

      - name: Upload Windows Installer
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows-artifact
          path: 'src-tauri/target/release/bundle/nsis/Quran Caption_*_x64-setup.exe'

      - name: Upload Linux Artifacts
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: linux-artifact
          path: |
            src-tauri/target/release/bundle/appimage/*.AppImage
            src-tauri/target/release/bundle/deb/*.deb
            src-tauri/target/release/bundle/rpm/*.rpm
            src-tauri/target/release/bundle/**/*.tar.*

  release:
    name: Create Draft Release
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Prepare release assets
        run: |
          mkdir release-assets
          cd artifacts/windows-artifact
          WIN_FILE=$(find . -name "Quran Caption_*_x64-setup.exe")
          mv "$WIN_FILE" ../../release-assets/Quran.Caption.Windows.exe
          cd ../../artifacts/macos-artifact
          DMG_FILE=$(find . -name "*.dmg")
          mv "$DMG_FILE" ../../release-assets/Quran.Caption.MacOS.dmg
          cd ../../artifacts/linux-artifact || true
          if [ -d . ]; then
            find . -type f \( -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" -o -name "*.tar.*" \) -exec mv {} ../../release-assets/ \;
          fi
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          files: release-assets/*
