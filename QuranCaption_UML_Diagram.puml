@startuml Quran Caption

class GlobalState {
    - availableTranslations: Record<string, object>
    - caches: Map<string, string>
}

class Project {
    + constructor(detail: ProjectDetail, [...], content?: ProjectContent)
    + save(): Promise<void>
}

class ProjectDetail {
    + NAME_MAX_LENGTH: number = 50
    + RECITER_MAX_LENGTH: number = 35
    - id: number
    - name: string
    - reciter: string
    - createdAt: Date
    - updatedAt: Date
    - verseRange: VerseRange
    - percentageCaptioned: number
    - status: Status
    - translations: object[]
    + constructor(name: string, [...], reciter: string)
    + updateTimestamp(): void
    + updatePercentageCaptioned(): void
}

class ProjectContent {
    - projectSettings: ProjectSettings
    - projectTranslation: ProjectTranslation
    + constructor(timeline?: Timeline, [...], projectTranslation?: ProjectTranslation)
    + getDefaultProjectContent(): ProjectContent
    + addAsset(filePath: string, [...], youtubeUrl?: string): void
    + removeAsset(asset: Asset): void
    + getAssetById(id: number): Asset
}

class ProjectEditorState {
    - currentTab: ProjectEditorTabs
    - showDropScreen: boolean
    - sections: object
    - videoPreview: VideoPreviewState
    - subtitlesEditor: SubtitlesEditorState
    - upperSectionHeight: number
}

class Timeline {
    + constructor(tracks?: Track[])
    + addAssetToTrack(trackType: string, [...], asset: any): void
    + getLongestTrackDuration(): Duration
    + removeAssetFromTracks(asset: Asset): void
    + getCurrentAssetOnTrack(trackType: TrackType): Asset
    + getFirstTrack(trackType: TrackType): Track
}

class Track {
    - type: TrackType
    + constructor(type: TrackType)
    + addAsset(asset: Asset): void
    + removeClip(id: number, [...], makeNextClipStartAtThisClipStartTime?: boolean): void
    + removeLastClip(): void
    + getName(): string
    + getIcon(): string
    + getAcceptableAssetType(): AssetType
    + getPixelPerSecond(): number
    + getDuration(): Duration
    + getCurrentClip(): Clip
    + getClipBefore(id: number): Clip
    + getClipAfter(id: number): Clip
    + getLastClip(): Clip
    + addSubtitle(verse: Verse, [...], surah: number): boolean
    + addSilence(beforeClipOfId?: number): boolean
    + addPredefinedSubtitle(text: string, [...], type: PredefinedSubtitleType): boolean
}

class TimelineState {
    - zoom: number
    - cursorPosition: number
    - showCursor: boolean
    - movePreviewTo: number
}
    abstract class Clip {
    - id: number
    - startTime: number
    - endTime: number
    - duration: number
    - type: ClipType
    + constructor(startTime: number, [...], type: ClipType)
    + getWidth(): number
    + updateStartTime(newStartTime: number): void
    + updateEndTime(newEndTime: number): void
    + setStartTime(newStartTime: number): void
    + setEndTime(newEndTime: number): void
    + getVerseKey(): string
}

class AssetClip  {
    - assetId: number
    + constructor(startTime: number, [...], assetId: number)
}

class SubtitleClip  {
    - surah: number
    - verse: number
    - startWordIndex: number
    - endWordIndex: number
    - text: string
    - isFullVerse: boolean
    - isLastWordsOfVerse: boolean
    - translations: object
    + constructor(startTime: number, [...], translations?: object)
}

class SilenceClip {
    + constructor(startTime: number, [...], endTime: number)
}

class PredefinedSubtitleClip {
    - text: string
    - predefinedSubtitleType: PredefinedSubtitleType
    - translations: object
    + constructor(startTime: number, [...], type: PredefinedSubtitleType)
}

class Asset {
    - id: number
    - fileName: string
    - filePath: string
    - type: AssetType
    - exists: boolean
    - fromYoutube: boolean
    - youtubeUrl?: string
    + constructor(filePath?: string, [...], youtubeUrl?: string)
}

class Duration {
    - ms: number
    + constructor(ms: number)
    + getFormattedTime(alsoRemoveMinIfZero: boolean, [...], showMs?: boolean): string
    + toSeconds(): number
    + isNull(): boolean
}

enum TrackType {
    Video
    Audio
    Subtitle
    Unknown
}

enum AssetType {
    Audio
    Video
    Image
    Unknown
}

enum ProjectEditorTabs {
    VideoEditor
    SubtitlesEditor
    Translations
    Style
    Export
}

enum ClipType {
    Silence
    "Pre-defined Subtitle"
    Subtitle
    Asset
}

enum PredefinedSubtitleType {
    Basmala
    Istiadhah
    "Sadaqallahul Azim"
    Takbir
    Other
}

' Relations de composition
GlobalState --> "0..*" ProjectDetail : userProjectsDetails
GlobalState --> "0..1" Project : currentProject

Project --> "1" ProjectDetail : detail
Project --> "1" ProjectContent : content
Project --> "1" ProjectEditorState : projectEditorState

ProjectContent --> "1" Timeline : timeline
ProjectContent --> "0..*" Asset : assets

Timeline --> "0..*" Track : tracks

Track --> "0..*" Clip : clips

ProjectEditorState --> "1" TimelineState : timeline

ProjectDetail --> "1" Duration : duration

Asset --> "1" Duration : duration

' Relations d'héritage
AssetClip --|> Clip
SubtitleClip --|> Clip
SilenceClip --|> Clip
PredefinedSubtitleClip --|> Clip

' Relations d'utilisation/dépendance
Track ..> TrackType : uses
Track ..> AssetType : uses
Asset ..> AssetType : uses
ProjectEditorState ..> ProjectEditorTabs : uses
Clip ..> ClipType : uses
PredefinedSubtitleClip ..> PredefinedSubtitleType : uses

' Relation de référence
AssetClip ..> Asset : references by assetId
@enduml