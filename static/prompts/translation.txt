**Task**:  
Map **Arabic segments** from Quranic verses to their corresponding **word indices** in pre-existing indexed translations. For each verse, identify which words in the translation correspond to each Arabic segment and return#### **Example 7: Strategic Overlapping for Complete Coverage**
- **Input**:  
  ```json
  [
    {
      "index": 0,
      "verseKey": "2:255",
      "segments": ["اللَّهُ لَا إِلَٰهَ إِلَّا هُوَ", "الْحَيُّ الْقَيُّومُ"],
      "translation": "0:Allah 1:- 2:there 3:is 4:no 5:deity 6:except 7:Him, 8:the 9:Ever-Living, 10:the 11:Sustainer 12:of 13:existence."
    }
  ]
  ```  
- **Output**:  
  ```json
  {
    "0": [[0, 7], [8, 13]]
  }
  ```  
- **Coverage Check**: Translation has words 0-13 (14 words). Output covers all 0-13 ✓ Complete coverage.

---

**Inputs**:  
An array of objects, where each object contains:  
1. `index` (number): Sequential index of the verse.
2. `verseKey` (string): The surah and verse number in the format "s:v" (e.g., "1:5").  
3. `segments` (array of strings): Arabic phrases to map from the verse.  
4. `translation` (string): Compact indexed translation format "index:word index:word..."

**Input Structure**:  
```json
[
  {
    "index": 0,
    "verseKey": "1:5",
    "segments": ["إِيَّاكَ نَعْبُدُ", "وَإِيَّاكَ نَسْتَعِينُ"],
    "translation": "0:You 1:˹alone˺ 2:we 3:worship 4:and 5:You 6:˹alone˺ 7:we 8:ask 9:for 10:help."
  }
]
```

**IMPORTANT PARSING NOTE**:  
- **Punctuation as separate words**: Pay attention that punctuation marks can be separate indexed words.
- **Example**: `"1:: 2:\"Il"` means index 1 is ":" (colon) and index 2 is "Il".
- **Do NOT ignore punctuation indices** - they must be included in ranges to ensure complete coverage.
- **Format parsing**: Split by spaces first, then by first colon to separate index from word.

---

**Output Requirements**:  
- Return a **JSON object** with string keys corresponding to the `index` of each input verse.
- Each key maps to an array of index ranges `[start, end]` for each segment in the same order as provided.
- Each range `[start, end]` represents the **inclusive** indices of words in the translation that correspond to the Arabic segment.
- If a segment cannot be mapped, return `null` for that segment.
- **Output Format**: Pure JSON only, no additional text or explanation.

**Output Structure**:  
```json
{
  "0": [[start1, end1], [start2, end2], ...],
  "1": [[start1, end1], [start2, end2], ...],
  ...
}
```

---

**Core Rules**:

1. **COMPLETE COVERAGE REQUIREMENT**:
   - **CRITICAL**: Every word index in the translation MUST appear in at least one segment range.
   - If a translation has 14 words (indices 0-13), ALL indices from 0 to 13 must be covered by the output ranges.
   - No translation word can be left unmapped. This is the most important rule.

2. **Index Range Mapping**:
   - Map each Arabic segment to the **continuous range of word indices** in the translation that best represents the segment's meaning.
   - Ranges are **inclusive** - `[2, 4]` means indices 2, 3, and 4.
   - Ensure the mapped words form a **contiguous sequence** in the translation array.

3. **Accurate Correspondence**:
   - Each segment's mapped indices must accurately represent the **complete meaning** of the Arabic segment.
   - Include all necessary words to capture the full semantic content of the segment.
   - Do not truncate or omit words that are essential to the segment's meaning.

4. **Overlapping Segments Allowed**:
   - Arabic segments can overlap, and their corresponding index ranges can also overlap.
   - If two segments share Arabic words, their index ranges can share translation word indices.
   - Use overlaps strategically to ensure complete coverage of all translation words.

5. **Contiguous Requirement**:
   - Each index range must represent **consecutive** indices in the translation array.
   - Invalid: `[1, 5]` if indices 2, 3, 4 don't correspond to the Arabic segment.
   - Valid: `[1, 3]` representing indices 1, 2, 3 in sequence.

6. **Handle Non-Mappable Cases**:
   - If an Arabic segment cannot be mapped to any contiguous sequence of translation words, return `null`.
   - However, ensure other segments compensate to maintain complete coverage.
   - Only use `null` if absolutely no reasonable mapping exists for that segment.

---

**Examples**:  

#### **Example 1: Basic Sequential Mapping**
- **Input**:  
  ```json
  [
    {
      "index": 0,
      "verseKey": "1:5",
      "segments": ["إِيَّاكَ نَعْبُدُ", "وَإِيَّاكَ نَسْتَعِينُ"],
      "translation": "0:You 1:˹alone˺ 2:we 3:worship 4:and 5:You 6:˹alone˺ 7:we 8:ask 9:for 10:help."
    }
  ]
  ```  
- **Output**:  
  ```json
  {
    "0": [[0, 3], [4, 10]]
  }
  ```  
- **Coverage Check**: Translation has words 0-10 (11 words). Output covers 0,1,2,3,4,5,6,7,8,9,10 ✓ Complete coverage.

#### **Example 2: Overlapping Segments**  
- **Input**:  
  ```json
  [
    {
      "index": 0,
      "verseKey": "1:6",
      "segments": ["اهْدِنَا الصِّرَاطَ", "الصِّرَاطَ الْمُسْتَقِيمَ"],
      "translation": "0:Guide 1:us 2:along 3:the 4:Straight 5:Path,"
    }
  ]
  ```  
- **Output**:  
  ```json
  {
    "0": [[0, 3], [3, 5]]
  }
  ```  
- **Coverage Check**: Translation has words 0-5 (6 words). Output covers 0,1,2,3,3,4,5 → unique: 0,1,2,3,4,5 ✓ Complete coverage.

#### **Example 3: Complex Structure with Complete Coverage**
- **Input**:  
  ```json
  [
    {
      "index": 0,
      "verseKey": "2:2",
      "segments": ["ذَٰلِكَ الْكِتَابُ", "لَا رَيْبَ فِيهِ", "هُدًى لِّلْمُتَّقِينَ", "لَا رَيْبَ فِيهِ هُدًى لِّلْمُتَّقِينَ"],
      "translation": "0:This 1:is 2:the 3:Book 4:about 5:which 6:there 7:is 8:no 9:doubt, 10:a 11:guidance 12:for 13:those 14:conscious 15:of 16:Allah."
    }
  ]
  ```  
- **Output**:  
  ```json
  {
    "0": [[0, 3], [4, 9], [10, 16], [4, 16]]
  }
  ```  
- **Coverage Check**: Translation has words 0-16 (17 words). Output covers all indices 0-16 ✓ Complete coverage.
- **Overlapping Check**: The last segment overlaps with the second and third, and it is OK and it should overlap to ensure full coverage.

#### **Example 4: Punctuation as Separate Words** ⚠️ **CRITICAL CASE**
- **Input**:  
  ```json
  [
    {
      "index": 0,
      "verseKey": "112:1",
      "segments": ["قُلۡ", "هُوَ", "ٱللَّهُ", "أَحَدٌ"],
      "translation": "0:Dis 1:: 2:\"Il 3:est 4:Allah, 5:Unique."
    }
  ]
  ```  
- **Output**:  
  ```json
  {
    "0": [[0, 1], [2, 2], [3, 4], [5, 5]]
  }
  ```  
- **Coverage Check**: Translation has words 0-5 (6 words). Output covers 0,1,2,3,4,5 ✓ Complete coverage.
- **Parsing Note**: Index 1 is ":" (colon punctuation), index 2 is "Il" - both must be included in ranges.

#### **Example 5: Single Word Segments**
- **Input**:  
  ```json
  [
    {
      "index": 0,
      "verseKey": "112:1",
      "segments": ["قُلْ", "هُوَ", "اللَّهُ", "أَحَدٌ"],
      "translation": "0:Say, 1:He 2:is 3:Allah, 4:One."
    }
  ]
  ```  
- **Output**:  
  ```json
  {
    "0": [[0, 0], [1, 1], [2, 3], [4, 4]]
  }
  ```  
- **Coverage Check**: Translation has words 0-4 (5 words). Output covers 0,1,2,3,4 ✓ Complete coverage.

#### **Example 6: Multiple Verses**
- **Input**:  
  ```json
  [
    {
      "index": 0,
      "verseKey": "1:1",
      "segments": ["بِسْمِ اللَّهِ", "الرَّحْمَٰنِ الرَّحِيمِ"],
      "translation": "0:In 1:the 2:name 3:of 4:Allah, 5:the 6:Entirely 7:Merciful, 8:the 9:Especially 10:Merciful."
    },
    {
      "index": 1,
      "verseKey": "1:2",
      "segments": ["الْحَمْدُ لِلَّهِ", "رَبِّ الْعَالَمِينَ"],
      "translation": "0:Praise 1:is 2:due 3:to 4:Allah, 5:Lord 6:of 7:the 8:worlds."
    }
  ]
  ```  
- **Output**:  
  ```json
  {
    "0": [[0, 4], [5, 10]],
    "1": [[0, 4], [5, 8]]
  }
  ```  
- **Coverage Check**: 
  - Verse 0: Translation has words 0-10 (11 words). Output covers all 0-10 ✓
  - Verse 1: Translation has words 0-8 (9 words). Output covers all 0-8 ✓


#### **Example 6: Strategic Overlapping for Complete Coverage**
- **Input**:  
  ```json
  [
    {
      "index": 0,
      "verseKey": "2:255",
      "segments": ["اللَّهُ لَا إِلَٰهَ إِلَّا هُوَ", "إِلَّا هُوَ الْحَيُّ الْقَيُّومُ "],
      "translation": "0:Allah 1:- 2:there 3:is 4:no 5:deity 6:except 7:Him, 8:the 9:Ever-Living, 10:the 11:Sustainer 12:of 13:existence."
    }
  ]
  ```  
- **Output**:  
  ```json
  {
    "0": [[0, 7], [6, 13]]
  }
  ```  
- **Coverage Check**: Translation has words 0-13 (14 words). Output covers all 0-13 ✓ Complete coverage.
- **Overlapping Check**: "إِلَّا هُوَ" is repeated in both segments, so it should overlap in indices [6,7].

---

**Edge Cases**:  
- **Empty Translation Array**: If `translation` is empty, return `[]` for that verse.  
- **No Mappable Segments**: If no segments can be mapped, return an array of `null` values.  
- **Empty Input Array**: Return `{}`.  
- **Single Word Segments**: Map to single indices, e.g., `[2, 2]` for one word at index 2.  

---

**Final Notes**:  
- **Return ONLY valid JSON** - no explanations, comments, or additional text.
- Index ranges are **inclusive** - `[0, 2]` includes indices 0, 1, and 2.
- Prioritize **accuracy** over coverage - if unsure, return `null` rather than incorrect mapping.
- Ensure mapped ranges represent **contiguous** word sequences in the translation.
- Overlapping ranges are expected when Arabic segments overlap semantically.

# The input :

