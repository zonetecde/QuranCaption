**Task**:  
Map **Arabic segments** from Quranic verses to their corresponding **word indices** in pre-existing indexed translations. For each verse, identify which words in the translation correspond to each Arabic segment and return the index ranges.

---

**Inputs**:  
An array of objects, where each object contains:  
1. `index` (number): Sequential index of the verse.
2. `verseKey` (string): The surah and verse number in the format "s:v" (e.g., "1:5").  
3. `segments` (array of strings): Arabic phrases to map from the verse.  
4. `translation` (array of objects): Indexed translation where each word has an index `i` and word `w`.

**Input Structure**:  
```json
[
  {
    "index": 0,
    "verseKey": "1:5",
    "segments": ["إِيَّاكَ نَعْبُدُ", "وَإِيَّاكَ نَسْتَعِينُ"],
    "translation": [
      {"i": 0, "w": "You"},
      {"i": 1, "w": "˹alone˺"},
      {"i": 2, "w": "we"},
      {"i": 3, "w": "worship"},
      {"i": 4, "w": "and"},
      {"i": 5, "w": "You"},
      {"i": 6, "w": "˹alone˺"},
      {"i": 7, "w": "we"},
      {"i": 8, "w": "ask"},
      {"i": 9, "w": "for"},
      {"i": 10, "w": "help."}
    ]
  }
]
```

---

**Output Requirements**:  
- Return a **JSON object** with string keys corresponding to the `index` of each input verse.
- Each key maps to an array of index ranges `[start, end]` for each segment in the same order as provided.
- Each range `[start, end]` represents the **inclusive** indices of words in the translation that correspond to the Arabic segment.
- If a segment cannot be mapped, return `null` for that segment.
- **Output Format**: Pure JSON only, no additional text or explanation.

**Output Structure**:  
```json
{
  "0": [[start1, end1], [start2, end2], ...],
  "1": [[start1, end1], [start2, end2], ...],
  ...
}
```

---

**Core Rules**:

1. **Index Range Mapping**:
   - Map each Arabic segment to the **continuous range of word indices** in the translation that best represents the segment's meaning.
   - Ranges are **inclusive** - `[2, 4]` means indices 2, 3, and 4.
   - Ensure the mapped words form a **contiguous sequence** in the translation array.

2. **Accurate Correspondence**:
   - Each segment's mapped indices must accurately represent the **complete meaning** of the Arabic segment.
   - Include all necessary words to capture the full semantic content of the segment.
   - Do not truncate or omit words that are essential to the segment's meaning.

3. **Overlapping Segments Allowed**:
   - Arabic segments can overlap, and their corresponding index ranges can also overlap.
   - If two segments share Arabic words, their index ranges can share translation word indices.
   - Example: segments `["إِيَّاكَ نَعْبُدُ", "نَعْبُدُ وَإِيَّاكَ"]` might map to `[[0, 3], [2, 6]]` where index 3 (worship) is shared.

4. **Complete Coverage Priority**:
   - Prioritize mapping that ensures all important translation words are covered by at least one segment.
   - Each segment should capture its full semantic meaning, even if this creates overlaps.

5. **Contiguous Requirement**:
   - Each index range must represent **consecutive** indices in the translation array.
   - Invalid: `[1, 5]` if indices 2, 3, 4 don't correspond to the Arabic segment.
   - Valid: `[1, 3]` representing indices 1, 2, 3 in sequence.

6. **Handle Non-Mappable Cases**:
   - If an Arabic segment cannot be mapped to any contiguous sequence of translation words, return `null`.
   - This may occur when the translation structure doesn't allow for direct correspondence.

---

**Examples**:  

#### **Example 1: Basic Mapping**  
- **Input**:  
  ```json
  [
    {
      "index": 0,
      "verseKey": "1:5",
      "segments": ["إِيَّاكَ نَعْبُدُ", "وَإِيَّاكَ نَسْتَعِينُ"],
      "translation": [
        {"i": 0, "w": "You"},
        {"i": 1, "w": "˹alone˺"},
        {"i": 2, "w": "we"},
        {"i": 3, "w": "worship"},
        {"i": 4, "w": "and"},
        {"i": 5, "w": "You"},
        {"i": 6, "w": "˹alone˺"},
        {"i": 7, "w": "we"},
        {"i": 8, "w": "ask"},
        {"i": 9, "w": "for"},
        {"i": 10, "w": "help."}
      ]
    }
  ]
  ```  
- **Output**:  
  ```json
  {
    "0": [[0, 3], [4, 10]]
  }
  ```  
- **Explanation**: First segment maps to "You ˹alone˺ we worship" (indices 0-3), second to "and You ˹alone˺ we ask for help." (indices 4-10).

#### **Example 2: Overlapping Segments**  
- **Input**:  
  ```json
  [
    {
      "index": 0,
      "verseKey": "1:6",
      "segments": ["اهْدِنَا الصِّرَاطَ", "الصِّرَاطَ الْمُسْتَقِيمَ"],
      "translation": [
        {"i": 0, "w": "Guide"},
        {"i": 1, "w": "us"},
        {"i": 2, "w": "along"},
        {"i": 3, "w": "the"},
        {"i": 4, "w": "Straight"},
        {"i": 5, "w": "Path,"}
      ]
    }
  ]
  ```  
- **Output**:  
  ```json
  {
    "0": [[0, 3], [3, 5]]
  }
  ```  
- **Explanation**: First segment "اهْدِنَا الصِّرَاطَ" maps to "Guide us along the" (indices 0-3), second segment "الصِّرَاطَ الْمُسْتَقِيمَ" maps to "the Straight Path," (indices 3-5), with overlap at index 3 ("the").

#### **Example 3: Multiple Verses**  
- **Input**:  
  ```json
  [
    {
      "index": 0,
      "verseKey": "1:6",
      "segments": ["اهْدِنَا", "الصِّرَاطَ الْمُسْتَقِيمَ"],
      "translation": [
        {"i": 0, "w": "Guide"},
        {"i": 1, "w": "us"},
        {"i": 2, "w": "along"},
        {"i": 3, "w": "the"},
        {"i": 4, "w": "Straight"},
        {"i": 5, "w": "Path,"}
      ]
    },
    {
      "index": 1,
      "verseKey": "1:7",
      "segments": ["صِرَاطَ الَّذِينَ أَنْعَمْتَ عَلَيْهِمْ"],
      "translation": [
        {"i": 0, "w": "the"},
        {"i": 1, "w": "Path"},
        {"i": 2, "w": "of"},
        {"i": 3, "w": "those"},
        {"i": 4, "w": "You"},
        {"i": 5, "w": "have"},
        {"i": 6, "w": "blessed"}
      ]
    }
  ]
  ```  
- **Output**:  
  ```json
  {
    "0": [[0, 1], [3, 5]],
    "1": [[0, 6]]
  }
  ```  
- **Explanation**: For verse 0: "اهْدِنَا" maps to "Guide us" (0-1), "الصِّرَاطَ الْمُسْتَقِيمَ" to "the Straight Path," (3-5). For verse 1: the entire segment maps to all words (0-6).

#### **Example 4: Non-Mappable Segment**  
- **Input**:  
  ```json
  [
    {
      "index": 0,
      "verseKey": "20:114",
      "segments": ["رَبِّ زِدْنِي عِلْمًا"],
      "translation": [
        {"i": 0, "w": "My"},
        {"i": 1, "w": "Lord,"},
        {"i": 2, "w": "increase"},
        {"i": 3, "w": "me"},
        {"i": 4, "w": "in"},
        {"i": 5, "w": "knowledge."}
      ]
    }
  ]
  ```  
- **Output**:  
  ```json
  {
    "0": [null]
  }
  ```  
- **Explanation**: The segment cannot be mapped to a contiguous sequence due to word order differences, so it returns `null`.

---

**Edge Cases**:  
- **Empty Translation Array**: If `translation` is empty, return `[]` for that verse.  
- **No Mappable Segments**: If no segments can be mapped, return an array of `null` values.  
- **Empty Input Array**: Return `{}`.  
- **Single Word Segments**: Map to single indices, e.g., `[2, 2]` for one word at index 2.  

---

**Final Notes**:  
- **Return ONLY valid JSON** - no explanations, comments, or additional text.
- Index ranges are **inclusive** - `[0, 2]` includes indices 0, 1, and 2.
- Prioritize **accuracy** over coverage - if unsure, return `null` rather than incorrect mapping.
- Ensure mapped ranges represent **contiguous** word sequences in the translation.
- Overlapping ranges are expected when Arabic segments overlap semantically.

# The input :

